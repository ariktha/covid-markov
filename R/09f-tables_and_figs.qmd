---
title: "Comprehensive Multi-State Model Analysis: Enhanced Results"
date: today
format:
  html:
    df-print: paged
    toc: true
    toc-float: true
    toc-depth: 3
    code-fold: true
    theme: default
    embed-resources: true
editor: source
editor_options: 
  markdown: 
    wrap: 72
execute:
  cache: true
---

```{r}
#| label: setup
#| include: false

rm(list = ls())

library(here)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tableone)
library(Hmisc)
library(ggpubr)
library(reactable)
library(plotly)
library(viridis)

```

```{r}
#| label: load-data
#| include: false

source(here("R", "00-config.R"))
source(here("R", "00-functions-tbl_figs.R"))

pt_stg <- readRDS(here("data", "temp", "pt_stg.rds"))

# fitted_base_models <- readRDS(here("data", "temp", "fitted_base_models.rds"))
base_models_comp <- readRDS(here("data", "temp", "base_models_comp.rds"))

# Markov assumption
# fitted_models_for_markov <- readRDS(here("data", "temp", "markov_comparison_models.rds"))
markov_comp <- readRDS(here("data", "temp", "markov_model_comp.rds"))

# Covariate effects
# univariate_models <- readRDS(here("data", "temp", "univar_and_retried_full_results.rds"))
univariate_comp <- readRDS(here("data", "temp", "univariate_comp.rds"))

transition_cons_comp <- readRDS(here("data", "temp", "const_univariate_comp.rds"))

# spline_comp <- readRDS(here("data", "temp", "spline_comp.rds"))
spline_effects <- readRDS(here("data", "temp", "spline_effects.rds"))

# Time-homogeneity
# time_varying_models <- readRDS(here("data", "temp", "time_vary_models.rds"))
time_homogeneity_comp <- readRDS(here("data", "temp", "time_vary_comp.rds"))

# Long-stay sensitivity analysis
truncated_model_comp <- readRDS(here("data", "temp", "truncated_model_comp.rds"))
truncated_univar_comp <- readRDS(here("data", "temp", "truncated_univar_comp.rds"))

excluded_model_comp <- readRDS(here("data", "temp", "excluded_model_comp.rds"))
excluded_univar_comp <- readRDS(here("data", "temp", "excluded_univar_comp.rds"))

```

```{r}
#| label: setup parameters for plots

stage_order <- c("4", "5", "6", "7", "8", "9", "10", "11")
state_order <- c("M", "M1", "M2", "M3", "MS", "S", "S1", "S2", "D", "R")

models <- c(
  "base_model" = "Base model",
  "hx_sev" = "State for history of severe",
  "mod_2" = "2 moderate states",
  "mod_3" = "3 moderate states",
  "sev_2" = "2 severe states",
  "reduced_trans" = "Simplified transitions"
)

models_df <- tibble(
  model = names(models),
  model_name = models
)

```

# Descriptive Statistics

## Table 1

```{r}
#| label: table-one-data
#| echo: true

tab_one_dat <- pt_stg %>%
  dplyr::filter(model == "base_model", state %in% c("M", "S")) %>%
  group_by(deid_enc_id) %>%
  mutate(ever_dnr = ifelse(any(DNR == 1), 1, 0)) %>%
  ungroup() %>%
  distinct() %>%
  mutate(copd = ifelse(copd == 1, TRUE, FALSE),
         absorbing_state = ifelse(end_in_death == "Yes", "Death", "Recovery")) %>%
  mutate(across(c(copd, COVID_vax, stage, state), as.factor))

cov_tx_days <- tab_one_dat %>%
  mutate(cov_tx = ifelse(!is.na(COVID_tx_name), 1, 0)) %>%
  group_by(deid_enc_id) %>%
  dplyr::summarize(tx_days = sum(cov_tx, na.rm = TRUE), .groups = "drop")

stg_days_enc <- tab_one_dat %>%
  group_by(deid_enc_id, stage, state) %>%
  dplyr::summarize(days_in_stage = n(), .groups = "drop") %>%
  dplyr::filter(state %in% c("M", "S"))

entry_stage <- tab_one_dat %>%
  group_by(deid_enc_id) %>%
  dplyr::filter(DaysSinceEntry == 0) %>%
  dplyr::select(deid_enc_id, state) %>%
  rename(entry_state = state)

n_pat_enc <- tab_one_dat %>%
  dplyr::select(deid_pat_id, deid_enc_id) %>%
  distinct() %>%
  group_by(deid_pat_id) %>%
  dplyr::summarize(n_enc = n())

```

```{r}
#| label: table-one-prep
#| echo: true

demographics <- c(
  "age" = "Age (years)",
  "sex" = "Sex", 
  "race" = "Race",
  "ethnicity" = "Ethnicity",
  "language" = "Preferred Language",
  "insurance_type" = "Insurance Type"
)

clinical_risk <- c(
  "smoking" = "Smoking Status",
  "BMI" = "BMI",
  "bmi_cat" = "BMI Category", 
  "cci_score" = "CCI (Score)",
  "cci_cat" = "CCI (Category)",
  "chf" = "CHF",
  "copd" = "COPD",
  "COVID_vax" = "COVID Vaccination"
)

encounter_chars <- c(
  "entry_state" = "Entry State",
  "cov_diag_medium" = "COVID Diagnosis (Medium)",
  "cov_diag_strict" = "COVID Diagnosis (Strict)", 
  "tx_days" = "Days with COVID Treatment",
  "stage" = "Days in WHO Stage",
  "state" = "Days in State",
  "LOS" = "Length of Stay (days)",
  "ever_dnr" = "Ever DNR during Encounter",
  "dnr_on_admit" = "DNR on Admission",
  "absorbing_state" = "Absorbing State"
)

tab_one_enc_var_labels <- c(demographics, clinical_risk, encounter_chars)
tab_one_enc_vars <- names(tab_one_enc_var_labels)

tab_one_pat_var_labels <- c(demographics, clinical_risk)
tab_one_pat_vars <- names(tab_one_pat_var_labels)

for(var in tab_one_enc_vars) {
  if(var %in% names(tab_one_dat)) {
    label(tab_one_dat[[var]]) <- tab_one_enc_var_labels[[var]]
  }
}

tab_one_pat_dat <- tab_one_dat %>%
  dplyr::select(deid_pat_id, all_of(tab_one_pat_vars)) %>%
  distinct() %>%
  left_join(n_pat_enc, by = "deid_pat_id")

tab_one_enc_dat <- tab_one_dat %>%
  dplyr::select(deid_enc_id, any_of(tab_one_enc_vars)) %>%
  distinct() %>%
  dplyr::select(-state, -stage) %>%
  left_join(cov_tx_days, by = "deid_enc_id") %>%
  left_join(entry_stage, by = "deid_enc_id") %>%
  left_join(stg_days_enc, by = "deid_enc_id", relationship = "many-to-many")

```

### Patient characteristics

```{r}
#| label: table-one-patients
#| echo: true

tab_one_pat <- CreateTableOne(vars = tab_one_pat_vars, data = tab_one_pat_dat)

tab_one_pat_mat <- print(tab_one_pat, printToggle = FALSE, varLabels = TRUE, 
                 pDigits = 3, formatOptions = list(big.mark = ","),
                 missing = TRUE)

# Find rows that start with spaces and wrap them in span with CSS
row_names <- rownames(tab_one_pat_mat)
category_rows <- which(grepl("^   ", row_names))
for(i in category_rows) {
  rownames(tab_one_pat_mat)[i] <- paste0('<span style="padding-left: 2em;">', 
                                      trimws(rownames(tab_one_pat_mat)[i]), 
                                      '</span>')
}

kable(tab_one_pat_mat, format = "html", escape = FALSE) %>%
  kable_styling() %>%
  pack_rows("Demographics", 2, 16,
            indent = TRUE, label_row_css = "font-weight: bold") %>%
  pack_rows("Clinical Risk Factors", 17, 30,
            indent = TRUE, label_row_css = "font-weight: bold")

kable(n_pat_enc %>% count(n_enc), 
      col.names = c("Encounters per patient", "Number of patients")) %>%
  kable_styling(full_width = FALSE)

```

### Encounter and patient characteristics

```{r}
#| label: table-one-encounters
#| echo: true

enc_tab_one_ent <- CreateTableOne(vars = tab_one_enc_vars, 
                              data = tab_one_enc_dat, 
                              strata = c("entry_state"),
                              addOverall = TRUE
                              )

enc_tab_one_abs <- CreateTableOne(vars = tab_one_enc_vars, 
                              data = tab_one_enc_dat, 
                              strata = c("absorbing_state"),
                              addOverall = FALSE
                              )

mat_ent <- print(enc_tab_one_ent, printToggle = FALSE, varLabels = TRUE, 
                 pDigits = 3, formatOptions = list(big.mark = ","),
                 missing = TRUE)
mat_abs <- print(enc_tab_one_abs, printToggle = FALSE, varLabels = TRUE, 
                 pDigits = 3, formatOptions = list(big.mark = ","),
                 missing = TRUE)

mat_ent_clean <- mat_ent[, c("Overall", "M", "S", "p")]
mat_abs_clean <- mat_abs[, c("Death", "Recovery", "p")]

colnames(mat_ent_clean)[4] <- "p_entry"
colnames(mat_abs_clean)[3] <- "p_absorbing"

combined_mat <- cbind(mat_ent_clean, mat_abs_clean)

modified_mat <- combined_mat
row_names <- rownames(modified_mat)

p_cols <- grep("p_", colnames(modified_mat))
for(col in p_cols) {
  modified_mat[, col] <- gsub("<", "&lt;", modified_mat[, col])
  modified_mat[, col] <- gsub(">", "&gt;", modified_mat[, col])
}

# Find rows that start with spaces and wrap them in span with CSS
category_rows <- which(grepl("^   ", row_names))
for(i in category_rows) {
  rownames(modified_mat)[i] <- paste0('<span style="padding-left: 2em;">', 
                                      trimws(rownames(modified_mat)[i]), 
                                      '</span>')
}

kableone(modified_mat, format = "html", escape = FALSE) %>%
  kable_styling() %>%
  add_header_above(c(" " = 1, "Overall" = 1, 
                     "Entry State" = ncol(mat_ent_clean) - 1, 
                     "Absorbing State" = ncol(mat_abs_clean))) %>%
  pack_rows("Demographics", 2, 22,
            indent = TRUE, label_row_css = "font-weight: bold") %>%
  pack_rows("Clinical Risk Factors", 23, 41,
            indent = TRUE, label_row_css = "font-weight: bold") %>%
  pack_rows("Encounter Characteristics", 42, 57,
            indent = TRUE, label_row_css = "font-weight: bold")

```

## Continuous variable distributions

```{r}
#| label: data-descriptives
#| echo: true

pt_dat <- pt_stg %>%
  dplyr::select(deid_enc_id, age, BMI, cci_score) %>%
  distinct() %>%
  pivot_longer(cols = c(age, BMI, cci_score), 
               names_to = "variable", 
               values_to = "value")

ggplot(pt_dat, aes(x = value, color = variable, fill = variable)) +
  geom_histogram() +
  facet_wrap(~ variable, scales = "free_x", nrow = 1,
             labeller = as_labeller(c(
               age = "Age (years)",
               BMI = "BMI",
               cci_score = "CCI Score"
             ))) +
  labs(x = "Value", y = "Count") +
  theme_minimal() +
  guides(color = "none", fill = "none")

```


## Timeline

### By hospital time

```{r}
#| label: timeline-hospital
#| echo: true

timeline_hosp_data <- pt_stg %>%
  dplyr::select(model, deid_enc_id, DaysSinceEntry, DaysSincePos, stage, state) %>%
  filter(model == "base_model") %>%
  mutate(state_type = ifelse(grepl("M", state), "Moderate", "Severe")) %>%
  group_by(deid_enc_id) %>%
  mutate(LOS = n(),
         n_severe = sum(ifelse(state_type == "Severe", 1, 0))) %>%
  ungroup() %>%
  arrange(desc(LOS), desc(n_severe)) %>%
  mutate(deid_enc_id = factor(deid_enc_id, levels = unique(deid_enc_id)))
  

p3 <- ggplot(data = timeline_hosp_data,
       aes(x = DaysSinceEntry, y = deid_enc_id, color = stage, fill = stage)) +
  geom_tile(aes(width = 1, height = 0.8)) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom") +
  scale_x_continuous(name = "Days since hospital admission", breaks = seq(0, 60, by = 5))

p3

# ggplotly(p3)

p4 <- ggplot(data = timeline_hosp_data,
       aes(x = DaysSinceEntry, y = deid_enc_id, color = state, fill = state)) +
  geom_tile(aes(width = 1, height = 0.8)) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  scale_x_continuous(name = "Days since hospital admission", breaks = seq(0, 60, by = 5))

p4

# ggplotly(p4)

p5 <- ggplot(data = timeline_hosp_data,
       aes(x = DaysSincePos, y = deid_enc_id, color = state, fill = state)) +
  geom_tile(aes(width = 1, height = 0.8)) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  scale_x_continuous(name = "Days since positive COVID test", breaks = seq(0, 60, by = 5))

p5

# ggplotly(p5)

```

### By calendar time

```{r}
#| label: timeline-calendar
#| echo: true

timeline_cal_data <- pt_stg %>%
  dplyr::select(model, deid_enc_id, date, CalendarTime, stage, state) %>%
  filter(model == "base_model") %>%
  mutate(state_type = ifelse(grepl("M", state), "Moderate", "Severe")) %>%
  arrange(date) %>%
  mutate(deid_enc_id = factor(deid_enc_id, levels = unique(deid_enc_id)))

p1 <- ggplot(data = timeline_cal_data,
       aes(x = date, y = deid_enc_id, color = stage, fill = stage)) +
  geom_tile(aes(width = 1, height = 0.8)) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom") +
  scale_x_date(date_labels = "%b %Y", date_breaks = "3 months")

p1

# ggplotly(p1)

p2 <- ggplot(data = timeline_cal_data,
       aes(x = date, y = deid_enc_id, color = state, fill = state)) +
  geom_tile(aes(width = 1, height = 1.5)) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        axis.title.y = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  scale_x_date(date_labels = "%b %Y", date_breaks = "3 months")

p2

# ggplotly(p2)

```

## State space diagrams

![State space diagram](images/state-space.png)

## Statetables

### By stage

Frequency of each pair of stages being observed in successive days

```{r}
#| label: stage-table
#| echo: true

stage_table <- statetable.msm(stage, deid_enc_id, data = subset(pt_stg, model == "base_model"))

stage_df <- as.data.frame(stage_table) %>%
  mutate(across(c(from, to), as.character)) %>%
  mutate(
    from = factor(from, levels = rev(stage_order)),
    to = factor(to, levels = stage_order),
    Freq = ifelse(Freq == 0, NA, Freq)
  )

ggplot(data = stage_df, aes(x = to, y = from, fill = Freq)) +
  geom_tile(color = "white", size = 0.1) +
  geom_text(aes(label = scales::comma(Freq)), color = "white", size = 2.5, fontface = "bold") +
  scale_fill_viridis_c(
    name = "Count", 
    trans = "log10", 
    na.value = "white", 
    limits = c(1, NA),
    breaks = c(1, 10, 100, 1000),
    labels = c("1", "10", "100", "1,000"),
    direction = -1
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid = element_blank(),
    plot.title = element_text(size = 10, face = "bold"),
    axis.title = element_text(size = 8),
    axis.text = element_text(size = 7),
    legend.title = element_text(size = 8),
    legend.text = element_text(size = 7)
  ) +
  labs(x = "To Stage", y = "From Stage")
  
```

### By state

Frequency of each pair of states being observed in successive days

```{r}
#| label: state-table
#| echo: true

get_state_table <- function(model_name) {
  model_data <- subset(pt_stg, model == model_name)
  st <- statetable.msm(state, deid_enc_id, data = model_data)
  st_df <- as.data.frame(st) %>%
    mutate(across(c(from, to), as.character)) %>%
    filter(from %in% state_order, to %in% state_order) %>%
    mutate(
      from = factor(from, levels = rev(state_order)),
      to = factor(to, levels = state_order),
      Freq = ifelse(Freq == 0, NA, Freq)
    )
  return(st_df)
  }

plot_data <- map(names(models), get_state_table)
names(plot_data) <- models

create_tile_plot <- function(data, model_name) {
  ggplot(data, aes(x = to, y = from, fill = Freq)) +
    geom_tile(color = "white", size = 0.1) +
    geom_text(aes(label = scales::comma(Freq)), color = "white", size = 2.5, fontface = "bold") +
    scale_fill_viridis_c(
      name = "Count", 
      trans = "log10", 
      na.value = "white", 
      limits = c(1, 10000),
      breaks = c(1, 10, 100, 1000, 10000),
      labels = c("1", "10", "100", "1,000", "10,000"),
      direction = -1
    ) +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      panel.grid = element_blank(),
      plot.title = element_text(size = 10, face = "bold"),
      axis.title = element_text(size = 8),
      axis.text = element_text(size = 7),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 7)
    ) +
    labs(x = "To State", y = "From State", title = model_name)
}

plot_list <- map2(plot_data, names(plot_data), create_tile_plot)

combined_plot <- ggarrange(
  plotlist = plot_list,
  nrow = 2, 
  ncol = 3,
  common.legend = TRUE,
  legend = "bottom"
)

combined_plot

```

# Model Results

## Transition intensity estimates

```{r}
#| label: transition-intensities-prep
#| echo: true

qmat_data <- base_models_comp[["qmatrix"]]
qmat_data <- qmat_data %>%
  dplyr::select(model, statename, tostatename, 
                estimate, conf.low, conf.high) %>%
  rename(
    from = statename,
    to = tostatename,
    q_estimate = estimate,
    q_conf_low = conf.low,
    q_conf_high = conf.high
  ) %>%
  left_join(models_df, by = "model") %>%
  left_join(trend_types, by = c("from", "to"))

x_limit <- 0.4

qmat_data <- qmat_data %>%
  mutate(
    q_conf_high_capped = pmin(q_conf_high, x_limit),
    needs_arrow = q_conf_high > x_limit,
    from = factor(from, levels = state_order),
    to = factor(to, levels = state_order),
    transition = paste0(from, " → ", to),
    transition = factor(transition, levels = paste0(rep(state_order, each = length(state_order)), 
                                                   " → ", 
                                                   rep(state_order, times = length(state_order))))
  ) %>%
  filter(transition %in% unique(transition)) %>%
  mutate(model_name = factor(model_name, levels = models_df$model_name)) %>%
  mutate(text = format_ci(q_estimate, q_conf_low, q_conf_high, digits = 2))


```

```{r}
#| label: transition-intensities-table
#| echo: true

kable(qmat_data %>%
        dplyr::filter(model_name == "base_model") %>%
        dplyr::select(model_name, transition, trend, 
                      text) %>%
        arrange(model_name, transition),
      col.names = c("Model Structure", "Transition", "Trend", 
                    "Transition intensity (per day)"),
      digits = c(0, 0, 0, 3, 3, 3)) %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(0, bold = TRUE)

```

```{r}
#| label: transition-intensities-plot
#| echo: true
#| fig.width: 7
#| fig.height: 6

ggplot(qmat_data, aes(x = q_estimate, y = fct_rev(transition), color = trend)) +
  geom_point(size = 2.5) +
  # Error bars with capped upper limits
  geom_errorbarh(aes(xmin = q_conf_low, xmax = q_conf_high_capped), height = 0.2) +
  # Add arrows for truncated confidence intervals
  geom_segment(data = filter(qmat_data, needs_arrow),
               aes(x = x_limit - 0.01, xend = x_limit - 0.005, 
                   y = fct_rev(transition), yend = fct_rev(transition)),
               arrow = arrow(length = unit(0.1, "cm"), type = "closed"),
               linewidth = 0.8) +
  facet_wrap(~ model_name, scales = "free_y") +
  scale_x_continuous(limits = c(0, x_limit)) +
  scale_color_manual(values = trend_colors) +
  labs(x = "Fitted transition intensity (per day)", y = "Transition") +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"),
        legend.position = "bottom")

```

## Transition probabilities

```{r}
#| label: transition-probabilities-prep
#| echo: true

pmat_data <- base_models_comp[["pmats"]]

pmat_data <- pmat_data %>%
  dplyr::select(model, statename, tostatename, t_value, 
                estimate, conf.low, conf.high) %>%
  rename(
    from = statename,
    to = tostatename,
    time_days = t_value,
    p_estimate = estimate,
    p_conf_low = conf.low,
    p_conf_high = conf.high
  ) %>%
  left_join(models_df, by = "model")

pmat_data <- add_transition_trends(pmat_data)

time_points <- unique(pmat_data$time_days)

pmat_data <- pmat_data %>%
  mutate(
    from = factor(from, levels = state_order),
    to = factor(to, levels = state_order),
    transition = paste0(from, " → ", to),
    transition = factor(transition, levels = paste0(rep(state_order, each = length(state_order)), 
                                                   " → ", 
                                                   rep(state_order, times = length(state_order))))
  ) %>%
  filter(transition %in% unique(transition)) %>%
  mutate(model_name = factor(model_name, levels = models_df$model_name)) %>%
  mutate(text = format_ci(p_estimate, p_conf_low, p_conf_high, digits = 2)) %>%
  drop_na()

```

```{r}
#| label: transition-probabilities-table
#| echo: true

kable(pmat_data %>%
        dplyr::filter(model_name == "base_model") %>%
        dplyr::select(model_name, time_days, transition, trend, text) %>%
        arrange(model_name, transition),
      col.names = c("Model Structure", "Time (days)", "Transition", "Trend", 
                    "Transition probability"),
      digits = c(0, 0, 0, 0, 2, 2, 2)) %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(0, bold = TRUE)

```

```{r}
#| label: transition-probabilities-plot-1
#| echo: true

plot_pmat_by_model <- function(model_name, nrows, ncols, data = pmat_data, model_title = NULL) {
  model_data <- pmat_data[pmat_data$model == model_name, ]
  p <- ggplot(model_data, aes(x = time_days, y = p_estimate, color = trend)) +
    geom_line(linewidth = 1) +
    geom_ribbon(aes(ymin = p_conf_low, ymax = p_conf_high), alpha = 0.2) +
    facet_wrap(~ transition, nrow = nrows, ncol = ncols) +
    scale_color_manual(values = trend_colors) +
    labs(x = "Time (days)", y = "Transition probability", title = model_title) +
    ylim(c(0, 1)) +
    theme_minimal() +
    theme(strip.text = element_text(face = "bold"),
          legend.position = "bottom")
  return(p)
}

pmat_plots <- models_df %>%
  mutate(nrows = c(2, 3, 3, 4, 3, 2),
         ncols = c(4, 5, 5, 6, 5, 4)) %>%
  pmap(function(model, nrows, ncols, model_name, ...) {
    plot_pmat_by_model(model, nrows, ncols, data = pmat_data, model_title = model_name)
  })

pmat_plots[[1]]
pmat_plots[[6]]

```

```{r}
#| label: transition-probabilities-plot-2
#| echo: true

ggplot(data = pmat_data, aes(y = transition, color = trend, alpha = time_days, group = time_days)) +
  geom_point(aes(x = p_estimate), size = 2.5) +
  geom_errorbarh(aes(xmin = p_conf_low, xmax = p_conf_high), height = 0.2) +
  facet_wrap(~ model_name, scales = "free_y") +
  scale_x_continuous(limits = c(0, 1), name = "Probability of transition") +
  scale_color_manual(values = trend_colors) +
  theme_minimal() +
  theme(legend.position = "bottom")

```

## Sojourn times

```{r}
#| label: sojourn-times-prep
#| echo: true

sojourn_data <- base_models_comp[["sojourns"]]
sojourn_data <- sojourn_data %>%
  dplyr::select(model, state, estimates, L, U) %>%
  rename(
    sojourn_estimate = estimates,
    sojourn_conf_low = L,
    sojourn_conf_high = U
  ) %>%
  left_join(models_df, by = "model") %>%
  mutate(
    state = factor(state, levels = state_order),
    model_name = factor(model_name, levels = models_df$model_name),
    text = format_ci(sojourn_estimate, sojourn_conf_low, sojourn_conf_high, digits = 2),
    state_type = ifelse(grepl("M", state) == TRUE, "Moderate", "Severe")
  )

```

```{r}
#| label: sojourn-times-table
#| echo: true

kable(sojourn_data %>%
        dplyr::select(model_name, state, text),
  col.names = c("Model", "State", "Mean sojourn time (days)")) %>%
  kable_styling(full_width = FALSE)
  
```

```{r}
#| label: sojourn-times-plot
#| echo: true

ggplot(sojourn_data, 
       aes(x = sojourn_estimate, y = fct_rev(state), color = state_type),
       alpha = 0.6) +
  geom_point(size = 2.5) +
  geom_errorbarh(aes(xmin = sojourn_conf_low, xmax = sojourn_conf_high), height = 0.2) +
  facet_wrap(~ model_name, scales = "free_y") +
  labs(x = "Mean sojourn time (days)", y = "State") +
  theme_minimal() +
  scale_color_manual(breaks = c("Moderate", "Severe"), 
                     values = c("#660066", "#336666"),
                     name = "State type") +
  theme(strip.text = element_text(face = "bold"),
        legend.position = "bottom") +
  xlim(c(0, NA))

```

# Model structure

```{r}
#| label: model-comparisons
#| eval: false

models_comparison <- base_models_comp$model_comparison$across_structure %>%
  drop_na() %>%
  mutate(draic_text = format_ci(draic, draic_ll, draic_ul, digits = 1),
         drlcv_text = format_ci(drlcv, drlcv_ll, drlcv_ul, digits = 1)) %>%
  mutate(model1 = recode(model1_struct, !!!models),
         model2 = recode(model2_struct, !!!models)) %>%
  mutate(preferred_model_draic = ifelse(draic < 0, model1_struct, model2_struct),
         preferred_model_drlcv = ifelse(drlcv < 0, model1_struct, model2_struct))

kable(models_comparison %>% 
        dplyr::select(model1, model2, draic_text, drlcv_text, 
                      preferred_model_draic, preferred_model_drlcv),
      col.names = c("Model 1", "Model 2", 
                    "ΔrAIC (95% CI)", "ΔrLCV (95% CI)",
                    "Preferred model (ΔrAIC)", "Preferred model (ΔrLCV)"),
      digits = c(0, 0, 1, 1, 0, 0)) %>%
  kable_styling(full_width = FALSE) %>%
  row_spec(0, bold = TRUE)

```

## State granularity

### Multiple moderate states

```{r}
#| label: moderate-states-model-comparison-loglik
#| echo: true
  
mod_state_mods <- c("base_model", "mod_2", "mod_3")

base_models_comp$model_summary %>%
  dplyr::filter(model %in% mod_state_mods) %>%
  mutate(model_name = case_when(model == "base_model" ~ "Base Model",
                                model == "mod_2" ~ "2 Moderate States",
                                model == "mod_3" ~ "3 Moderate States",
                                TRUE ~ NA_character_)) %>%
  dplyr::select(model_name, n_params, loglik, AIC, BIC) %>%
  arrange(AIC)

```

```{r}
#| label: moderate-states-model-comparison-prevalences
#| echo: true
  
mod_prev <- base_models_comp$prevalence %>%
  dplyr::filter(model %in% mod_state_mods) %>%
  mutate(model_name = case_when(model == "base_model" ~ "Base Model",
                                model == "mod_2" ~ "2 Moderate States",
                                model == "mod_3" ~ "3 Moderate States",
                                TRUE ~ NA_character_)) %>%
  dplyr::select(model_name, time, state, observed_count, 
                expected_count, expected_count_ll, expected_count_ul,
                N_at_risk)

ggplot(data = subset(mod_prev, state %in% c("S", "D", "R")),
       aes(x = factor(time))) +
  geom_bar(aes(y = N_at_risk), 
           stat = "identity", alpha = 0.3) +
  geom_point(aes(y = observed_count, color = model_name), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, color = model_name), 
                width = 0.2, position = position_dodge(width = 1)) +
  facet_wrap(~state, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal() 

ggplot(data = subset(mod_prev, state %in% c("S", "D", "R")),
       aes(x = factor(time))) +
  geom_point(aes(y = observed_count, color = model_name), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, color = model_name), 
                width = 0.2, position = position_dodge(width = 1)) +
  facet_wrap(~state, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal() 

ggplot(data = subset(mod_prev, state %in% c("M", "M1", "M2", "M3")),
       aes(x = factor(time))) +
  geom_bar(aes(y = N_at_risk), 
           stat = "identity", alpha = 0.3) +
  geom_point(aes(y = observed_count, color = model_name, alpha = state), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name, alpha = state), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, color = model_name, alpha = state), 
                width = 0.2, position = position_dodge(width = 1)) +
  # facet_wrap(~state, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal() 

ggplot(data = subset(mod_prev, state %in% c("M", "M1", "M2", "M3")),
       aes(x = factor(time))) +
  geom_point(aes(y = observed_count, color = model_name, alpha = state), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name, alpha = state), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, color = model_name, alpha = state), 
                width = 0.2, position = position_dodge(width = 1)) +
  # facet_wrap(~state, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal() +
  scale_alpha_manual(values = c(1, 1, 0.5, 0.3), name = "State", breaks = c("M", "M1", "M2", "M3"))


```

```{r}
#| label: moderate-states-model-comparison-pred
#| echo: true



```

### Multiple severe states

```{r}
#| label: severe-states-model-comparison-loglik
#| echo: true

sev_state_mods <- c("base_model", "sev_2")

base_models_comp$model_summary %>%
  dplyr::filter(model %in% sev_state_mods) %>%
  mutate(model_name = case_when(model == "base_model" ~ "Base Model",
                                model == "sev_2" ~ "2 Severe States",
                                TRUE ~ NA_character_)) %>%
  dplyr::select(model_name, n_params, loglik, AIC, BIC) %>%
  arrange(AIC)

```

```{r}
#| label: severe-states-model-comparison-prevalences
#| echo: true

sev_prev <- base_models_comp$prevalence %>%
  dplyr::filter(model %in% sev_state_mods) %>%
  mutate(model_name = case_when(model == "base_model" ~ "Base Model",
                                model == "sev_2" ~ "2 Severe States",
                                TRUE ~ NA_character_)) %>%
  dplyr::select(model_name, time, state, observed_count, 
                expected_count, expected_count_ll, expected_count_ul,
                N_at_risk) %>%
  mutate(state_type = ifelse(grepl("S", state) == TRUE, "S", state))

ggplot(data = sev_prev, aes(x = factor(time))) +
  geom_bar(aes(y = N_at_risk), 
           stat = "identity", alpha = 0.3) +
  geom_point(aes(y = observed_count, color = model_name, alpha = state), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name, alpha = state), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, 
                    color = model_name, alpha = state), 
                width = 0.2, position = position_dodge(width = 1)) +
  facet_wrap(~state_type, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal() +
  scale_alpha_manual(values = c(1, 1, 0.5, 1, 1, 1), 
                     breaks = c("S", "S1", "S2", "M", "R", "D"),
                     name = "State")
  
ggplot(data = sev_prev, aes(x = factor(time))) +
  geom_point(aes(y = observed_count, color = model_name, alpha = state), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name, alpha = state), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, 
                    color = model_name, alpha = state), 
                width = 0.2, position = position_dodge(width = 1)) +
  facet_wrap(~state_type, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal() +
  scale_alpha_manual(values = c(1, 1, 0.5, 1, 1, 1), 
                     breaks = c("S", "S1", "S2", "M", "R", "D"),
                     name = "State")
```

## Transition structure

### Simplified transitions

```{r}
#| label: simplified-transitions-model-comparison-loglik
#| echo: true

simp_trans_mods <- c("base_model", "reduced_trans")

base_models_comp$model_summary %>%
  dplyr::select(model, n_params, loglik, AIC, BIC) %>%
  dplyr::filter(model %in% simp_trans_mods) %>%
  arrange(AIC)

```

```{r}
#| label: simplified-transitions-model-comparison-prevalences
#| echo: true

trans_prev <- base_models_comp$prevalence %>%
  dplyr::filter(model %in% simp_trans_mods) %>%
  mutate(model_name = case_when(model == "base_model" ~ "Base Model",
                                model == "reduced_trans" ~ "Simplified transitions",
                                TRUE ~ NA_character_)) %>%
  dplyr::select(model_name, time, state, observed_count, 
                expected_count, expected_count_ll, expected_count_ul,
                N_at_risk)
  
ggplot(trans_prev, aes(x = factor(time))) +
  geom_bar(aes(y = N_at_risk), 
           stat = "identity", alpha = 0.3) +
  geom_point(aes(y = observed_count, color = model_name), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, color = model_name), 
                width = 0.2, position = position_dodge(width = 1)) +
  facet_wrap(~state, scales = "free_y") +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal()

ggplot(trans_prev, aes(x = factor(time))) +
  geom_point(aes(y = observed_count, color = model_name), 
             shape = 5, size = 2, position = position_dodge(width = 1)) +
  geom_point(aes(y = expected_count, color = model_name), 
             size = 2, position = position_dodge(width = 1)) +
  geom_errorbar(aes(ymin = expected_count_ll, 
                    ymax = expected_count_ul, color = model_name), 
                width = 0.2, position = position_dodge(width = 1)) +
  facet_wrap(~state) +
  labs(x = "Time (days)", y = "Count") +
  theme_minimal()

```

# Markov property

```{r}
#| label: markov-property-model-comparison
#| echo: true

markov_models_summary <- models_for_markov_comp[["model_summary"]] %>%
  mutate(model_name = case_when(model == "base_no_covariates" ~ "Base Model",
                                model == "base_with_time_severe" ~ "Base Model +\ntime in severe\ncovariate",
                                model == "history_severe_structure" ~ "State for history\nof severe",
                                model == "base_with_time_severe_spline" ~ "Base Model +\ntime in severe\nspline covariate",
                                model == "base_with_time_severe_ts" ~ "Base Model +\ntime in severe\ntransition-specific",
                                TRUE ~ NA_character_)) %>%
  # left_join(models_df, by = "model") %>%
  dplyr::select(model_name, n_params, loglik, AIC, BIC)

print(markov_models_summary)

# kable(markov_models_summary, 
#       col.names = c("Model", "Number of parameters", "Log-likelihood", 
#                     "AIC", "BIC"),
#       digits = c(0, 0, 2, 1, 1)) %>%
#   kable_styling(full_width = FALSE) %>%
#   row_spec(0, bold = TRUE)

markov_models_summary_long <- markov_models_summary %>%
  dplyr::select(model_name, n_params, loglik, AIC, BIC) %>%
  pivot_longer(cols = -model_name, names_to = "metric", values_to = "value") %>%
  mutate(metric = factor(metric, levels = c("n_params", "loglik", "AIC", "BIC"),
                         labels = c("Number of parameters", "Log-likelihood", "AIC", "BIC")))
  
markov_models_summary_long_colors <- markov_models_summary_long %>%
  dplyr::filter(model_name!= "State for history\nof severe") %>%
  group_by(metric) %>%
  mutate(rank = dense_rank(value))

markov_models_summary_long <- markov_models_summary_long %>%
  left_join(markov_models_summary_long_colors %>%
              dplyr::select(model_name, metric, rank),
            by = c("model_name", "metric"))

ggplot(markov_models_summary_long, aes(x = model_name, y = value, color = rank, shape = model_name)) +
  geom_point(size = 3) +
  geom_line(aes(group = model_name), linewidth = 1) +
  facet_wrap(~ metric, scales = "free_y", nrow = 4) +
  scale_color_viridis(option = "mako", na.value = "darkgrey") +
  scale_shape_manual(values = c(17, 16, 16, 16, 1)) +
  labs(x = "Covariate structure", y = "Value", color = "Model") +
  theme_minimal() +
  theme(legend.position = "bottom", axis.title = element_blank()) +
  guides(color = "none", shape = "none")

# markov_models_comparison_across <- models_for_markov_comp$model_comparison$across_structure %>%
#   drop_na() %>%
#   dplyr::filter(formula2 == "~ 1") %>%
#   mutate(draic_text = format_ci(draic, draic_ll, draic_ul, digits = 3),
#          drlcv_text = format_ci(drlcv, drlcv_ll, drlcv_ul, digits = 3)) %>%
#   mutate(model1 = recode(model1_struct, !!!models),
#          model2 = recode(model2_struct, !!!models)) %>%
#   mutate(preferred_model_draic = ifelse(draic < 0, model1_struct, model2_struct),
#          preferred_model_drlcv = ifelse(drlcv < 0, model1_struct, model2_struct))

# kable(markov_models_comparison_across %>%
#   dplyr::select(model1, model2, draic_text, drlcv_text, 
#                 preferred_model_draic, preferred_model_drlcv),
#   col.names = c("Model 1", "Model 2", 
#                       "ΔrAIC (95% CI)", "ΔrLCV (95% CI)",
#                       "Preferred model (ΔrAIC)", "Preferred model (ΔrLCV)"),
#         digits = c(0, 0, 3, 3, 0, 0)) %>%
#   kable_styling(full_width = FALSE) %>%
#   row_spec(0, bold = TRUE)

```

# Time-homogeneity

```{r}
#| label: time-homogeneity-prep
#| echo: true

time_vars <- c("time", "from_state", "to_state", "transition", "intensity", 
               "intensity_lower", "intensity_upper", "hazard_ratio", "hr_lower", 
               "hr_upper", "model_name", "formula_name", "time_type", "time_term")

hospital_time_plot_list <- lapply(
  hospital_time_plot_data, 
  function(element) {
    available_cols <- intersect(time_vars, names(element))
    element[, available_cols, drop = FALSE]
    })

hospital_time_plot_tib <- do.call(rbind, hospital_time_plot_list)
hospital_time_plot_tib <- hospital_time_plot_tib %>%
  left_join(trend_types, by = join_by("from_state" == "from", "to_state" == "to"))

calendar_time_plot_list <- lapply(
  calendar_time_plot_data, 
  function(element) {
    available_cols <- intersect(time_vars, names(element))
    element[, available_cols, drop = FALSE]
    })

calendar_time_plot_tib <- do.call(rbind, calendar_time_plot_list)
calendar_time_plot_tib <- calendar_time_plot_tib %>%
  left_join(trend_types, by = join_by("from_state" == "from", "to_state" == "to"))

```

```{r}
#| label: time-homogeneity-effects
#| echo: true

models <- c("base_model_linear_days_since_entry", 
            "base_model_spline_days_since_entry", 
            "base_model_ts_days_since_entry",
            "base_model_linear_calendar_time", 
            "base_model_spline_calendar_time", 
            "base_model_ts_calendar_time")

time_plot_data <- rbind(
  subset(hospital_time_plot_tib, model_name %in% models),
  subset(calendar_time_plot_tib, model_name %in% models)
)

ggplot(subset(hospital_time_plot_tib, model_name == "base_model_piecewise_days_since_entry"), 
       aes(x = time, y = intensity, color = trend)) +
  geom_line(linewidth = 1) +
  geom_ribbon(aes(ymin = intensity_lower, ymax = intensity_upper), alpha = 0.2) +
  facet_wrap(~ transition, scales = "free_y", ncol = 1) +
  scale_color_manual(values = trend_colors) +
  labs(x = "Days since hospital admission", y = "Transition intensity (per day)") +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"),
        legend.position = "bottom")

```

# Covariate effects

## Univariate effects: Time-invariant

```{r}
#| label: univariate-effects data prep

univariate_model_comp <- univariate_comp$model_summary %>%
  dplyr::filter(model == "base_model") %>%
  dplyr::select(covariate, n_params, loglik, AIC, BIC) %>%
  mutate(effect_type = "constant")

transition_model_comp <- transition_specific_comp$model_summary %>%
  dplyr::filter(model == "base_model") %>%
  dplyr::select(covariate, n_params, loglik, AIC, BIC) %>%
  mutate(effect_type = "transition-specific")

base_model_comp <- base_models_comp$model_summary %>%
  dplyr::filter(model == "base_model") %>%
  dplyr::select(n_params, loglik, AIC, BIC) %>%
  mutate(covariate = "No covariate", effect_type = "N/A")

spline_model_comp <- spline_comp$model_summary %>%
  dplyr::select(model, n_params, loglik, AIC, BIC) %>%
  rowwise() %>%
  mutate(covariate = sub("\\..*", "", model)) %>%
  dplyr::select(-model) %>%
  mutate(effect_type = "spline")

key_covariates_labels <- c("Age", "Sex", "Race", "Ethnicity", "Language", 
                           "Insurance type", "Smoking status", "BMI", "BMI category", 
                           "COVID-19 vaccination", "Charlson comorbidity index", "CHF", "CCI category", 
                           "COPD", "DNR on admission")


combined_univariate_comp <- rbind(univariate_model_comp, 
                                  transition_model_comp,
                                  spline_model_comp)
combined_univariate_comp_long <- combined_univariate_comp %>%
  rename(`N parameters` = n_params, 
         `Log-likelihood` = loglik) %>%
  pivot_longer(cols = -c(covariate, effect_type), 
               names_to = "metric", 
               values_to = "value") %>%
  mutate(covariate = factor(covariate, levels = c(key_covariates),
                            labels = c(key_covariates_labels)),
         effect_type = factor(effect_type, levels = c("constant", "transition-specific", "spline"),
                              labels = c("Constant", "Transition-specific", "Spline"))) %>%
  group_by(metric) %>%
  mutate(rank = dense_rank(value)) %>%
  ungroup()

base_model_comp_long <- base_model_comp %>%
  rename(`N parameters` = n_params, 
         `Log-likelihood` = loglik) %>%
  dplyr::select(-c(covariate, effect_type)) %>%
  pivot_longer(cols = everything(),
               names_to = "metric", 
               values_to = "value")
```

```{r}
#| label: univariate-effects-plot
#| echo: true
#| fig.width: 8
#| fig.height: 5

ggplot(combined_univariate_comp_long, 
       aes(x = covariate, y = value, color = rank, shape = effect_type, group = effect_type)) +
  geom_hline(data = base_model_comp_long, aes(yintercept = value), linetype = "dashed", color = "darkgrey") +
  geom_point(size = 3, position = position_dodge(0.7)) +
  facet_wrap(~ metric, scales = "free_y", nrow = 4) +
  scale_color_viridis(option = "mako", na.value = "darkgrey") +
  scale_shape_manual(values = c(1, 16, 15, 17)) +
  labs(x = "Covariate", y = "Value", color = "Model", shape = "Effect type") +
  theme_minimal() +
  theme(legend.position = "bottom", axis.title = element_blank()) +
  guides(color = "none")

```

```{r}
#| label: univariate-effects-loglik
#| echo: true
#| eval: false

base_loglik <- base_models_comp$model_summary %>%
  dplyr::filter(model == "base_model") %>%
  dplyr::select(model, covariate, constraint_type, n_params, loglik, AIC, BIC) %>%
  pivot_longer(cols = c(n_params, loglik, AIC, BIC), 
               names_to = "metric", 
               values_to = "value")

univar_loglik_long <- univariate_comp$model_summary %>%
  rbind(transition_cons_comp$model_summary) %>%
  dplyr::select(model, covariate, constraint_type, n_params, loglik, AIC, BIC) %>%
  pivot_longer(cols = c(n_params, loglik, AIC, BIC), 
               names_to = "metric", 
               values_to = "value")

ggplot(univar_loglik_long, aes(x = covariate, y = value, shape = constraint_type)) +
  geom_line(data = base_loglik, aes(x = covariate, y = value), 
            linetype = "dashed", color = "darkgrey", linewidth = 0.8) +
  geom_point(size = 3, position = position_dodge(0.7)) +
  facet_wrap(~ metric, scales = "free_y", nrow = 4) +
  scale_color_viridis(option = "mako", na.value = "darkgrey") +
  scale_shape_manual(values = c(16, 15, 17, 1), na.translate = FALSE) +
  labs(x = "Covariate", y = "Value", color = "Model", shape = "Constraint type") +
  theme_minimal() +
  theme(legend.position = "bottom", axis.title = element_blank()) +
  guides(color = "none")


```

## Spline effects

### Transition intensities

```{r}
#| label: spline-effects-transition-intensities-plot
#| echo: true

spline_effects_plot <- spline_effects %>%
  left_join(trend_types, by = join_by("from_state" == "from", "to_state" == "to")) %>%
  mutate(
    spline_variable = factor(spline_variable, levels = c("age", "BMI", "cci_score"),
                             labels = c("Age (years)", "BMI", "CCI Score")))

ggplot(spline_effects_plot, aes(x = eval_value, color = trend)) +
  geom_line(aes(y = intensity), linewidth = 1) +
  geom_ribbon(aes(ymin = intensity_lower, ymax = intensity_upper, fill = trend), 
              alpha = 0.6, color = NA) +
  facet_grid(transition ~ spline_variable, scales = "free_x") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  labs(x = "Covariate value", y = "Transition intensity") +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"),
        legend.position = "bottom")
```

### Hazard ratios

```{r}
#| label: spline-effects-hr-plot
#| echo: true

ggplot(spline_effects_plot, aes(x = eval_value, color = trend)) +
  geom_line(aes(y = hazard_ratio), linewidth = 1) +
  geom_ribbon(aes(ymin = hr_lower, ymax = hr_upper, fill = trend), 
              alpha = 0.6, color = NA) +
  facet_grid(transition ~ spline_variable, scales = "free_x") +
  scale_color_viridis_d() +
  scale_fill_viridis_d() +
  labs(x = "Covariate value", y = "Hazard Ratio") +
  ylim(c(0, 2)) +
  theme_minimal() +
  theme(strip.text = element_text(face = "bold"),
        legend.position = "bottom")
```

## Constrains on transitions

```{r}

```

